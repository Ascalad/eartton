#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";

;; Структура данных стейкинга
;; storage#_ total_staked:Coins exchange_rate:uint32 
;;           sttoken_supply:Coins master_address:MsgAddress
;;           stakers:^Cell rewards_pool:Coins = Storage;

(int, int, int, slice, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(),      ;; total_staked
        ds~load_uint(32),     ;; exchange_rate (1e9 = 1:1)
        ds~load_coins(),      ;; sttoken_supply
        ds~load_msg_addr(),   ;; master_address
        ds~load_ref(),        ;; stakers (словарь стейкеров)
        ds~load_coins()       ;; rewards_pool
    );
}

() save_data(int total_staked, int exchange_rate, int sttoken_supply, 
            slice master_address, cell stakers, int rewards_pool) impure inline {
    set_data(begin_cell()
        .store_coins(total_staked)
        .store_uint(exchange_rate, 32)
        .store_coins(sttoken_supply)
        .store_slice(master_address)
        .store_ref(stakers)
        .store_coins(rewards_pool)
        .end_cell());
}

;; Структура данных стейкера
;; staker_data#_ amount:Coins lock_end:uint64 bonus_apr:uint16 = StakerData;

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    
    (int total_staked, int exchange_rate, int sttoken_supply, 
     slice master_address, cell stakers, int rewards_pool) = load_data();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == op::stake) {
        int amount = in_msg_body~load_coins();
        int lock_period = in_msg_body~load_uint(32);
        int bonus_apr = in_msg_body~load_uint(16);
        
        ;; Создаем запись о стейке
        cell staker_data = begin_cell()
            .store_coins(amount)
            .store_uint(now() + lock_period, 64)
            .store_uint(bonus_apr, 16)
            .end_cell();
        
        stakers~udict_set(256, slice_hash(sender_address), staker_data);
        
        ;; Рассчитываем количество stToken для выпуска
        int sttoken_amount = (amount * 1000000000) / exchange_rate;
        
        ;; Обновляем состояние
        total_staked += amount;
        sttoken_supply += sttoken_amount;
        
        ;; Отправляем stToken пользователю
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(op::mint_sttoken, 32)
            .store_uint(query_id, 64)
            .store_coins(sttoken_amount)
            .end_cell();
        
        send_raw_message(msg, 64);
        
        save_data(total_staked, exchange_rate, sttoken_supply, 
                 master_address, stakers, rewards_pool);
        return ();
    }
    
    if (op == op::unstake) {
        int sttoken_amount = in_msg_body~load_coins();
        
        ;; Получаем данные стейкера
        (cell staker_data, int found) = stakers.udict_get?(256, slice_hash(sender_address));
        throw_unless(73, found);
        
        slice sd = staker_data.begin_parse();
        int staked_amount = sd~load_coins();
        int lock_end = sd~load_uint(64);
        int bonus_apr = sd~load_uint(16);
        
        ;; Проверяем, закончился ли период блокировки
        throw_unless(74, now() >= lock_end);
        
        ;; Рассчитываем награду
        int stake_duration = now() - (lock_end - (lock_end - now()));
        int reward = (staked_amount * bonus_apr * stake_duration) / (365 * 24 * 3600 * 10000);
        
        ;; Рассчитываем количество токенов для возврата
        int return_amount = (sttoken_amount * exchange_rate) / 1000000000;
        
        ;; Обновляем состояние
        total_staked -= staked_amount;
        sttoken_supply -= sttoken_amount;
        rewards_pool -= reward;
        
        ;; Удаляем запись о стейке
        stakers~udict_delete?(256, slice_hash(sender_address));
        
        ;; Отправляем токены и награду пользователю
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(return_amount + reward)
            .end_cell();
        
        send_raw_message(msg, 64);
        
        save_data(total_staked, exchange_rate, sttoken_supply, 
                 master_address, stakers, rewards_pool);
        return ();
    }
    
    if (op == op::update_exchange_rate) {
        ;; Только мастер-контракт может обновлять курс обмена
        throw_unless(73, equal_slices(sender_address, master_address));
        
        int new_rate = in_msg_body~load_uint(32);
        exchange_rate = new_rate;
        
        save_data(total_staked, exchange_rate, sttoken_supply, 
                 master_address, stakers, rewards_pool);
        return ();
    }
    
    throw(0xffff);
}

;; Геттеры
(int, int, int) get_staking_data() method_id {
    (int total_staked, int exchange_rate, int sttoken_supply, 
     slice master_address, cell stakers, int rewards_pool) = load_data();
    return (total_staked, exchange_rate, sttoken_supply);
}

(int, int, int) get_staker_data(slice staker_address) method_id {
    (_, _, _, _, cell stakers, _) = load_data();
    (cell staker_data, int found) = stakers.udict_get?(256, slice_hash(staker_address));
    if (found) {
        slice sd = staker_data.begin_parse();
        return (sd~load_coins(), sd~load_uint(64), sd~load_uint(16));
    }
    return (0, 0, 0);
} 